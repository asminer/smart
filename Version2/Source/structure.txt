
$Id$

Smart version 2.

Files, and what they define, in a roughly layered sense.

File	  	What's there
----------	----------------------------------------------------
types		Definitions of type constants, and some handy 
		functions (mostly used by the compiler)

exprs		Result class.  Engine information class.
		Expression class base.
		Symbols.
		Constant bool, int, and real expressions.

sets		Set expressions and their results.

options

infinity	Infinity constants.

variables	Functions with no parameters.

functions	User-defined functions and internal functions.

arrays		User-defined arrays.

baseops		Base classes for operators like "+"
		(to reduce cut&paste of virtual functions)

operators	Operator expressions for all types,
		including sets.

casting		Type casting operators for all types.

initfuncs	Initialization of internal (not model-related) functions.



Overview of file structure will go here.

Try changing the structure significantly.

What we have:

   Base language:
     types, results, basic expressions,
     symbols, functions, 

Notes:

For this version, avoid linked lists for language features
(e.g., return the variables in an expression, etc.)
Use buffers instead, where a function will return the number of
items and fill a buffer of those items (prevening overflow, of course).

Re-designing discrete-state model stuff:

Discrete states: now will be arrays of shorts.  No virtual functions.
No functions at all, actually.
The model itself will be used to display the states.

When a partition is specified: all states are saved as an array of
submarking indices, submarkings generated on the fly for explicit
approaches.

Use templates for fast things like firing events and generation.

