
// $Id$

#ifndef SETS_H
#define SETS_H

/** @name sets.h
    @type File
    @args \ 

  Results for sets.
  Basic set expressions.
  (Set operators are defined elsewhere.)

  Right now, only integer and real sets are supported.
 
 */

#include "exprs.h"

//@{
  



// ******************************************************************
// *                                                                *
// *                        set_result class                        *
// *                                                                *
// ******************************************************************

/**   The base class for sets, as generated by a set expression.
*/  

class set_result {
  /// Number of elements
  int size;  
public:
  set_result(int s);
  virtual ~set_result();

  inline int Size() const { return size; }

  /** Get the nth item of the set.
      n must be between 0 and Size()-1.
   */
  virtual void GetElement(int n, result &x) = 0;

  /** The position of x in the set.
      If x is not contained in the set, we return -1.
      Note that this is the inverse of GetElement.
   */
  virtual int IndexOf(const result &x) = 0;

  /** Get the index and value of the nth smallest element of the set.
      n must be between 0 and Size()-1.
      This is used during set union, intersection, etc.
   */
  virtual void GetOrder(int n, int &i, result &x) = 0;
};




// ******************************************************************
// *                                                                *
// *           Global functions  to build set expressions           *
// *                                                                *
// ******************************************************************

/**  Builds an interval set expression.
     The arguments must be all the same type.
 */

expr*  MakeInterval(expr* start, expr* stop, expr* inc);

//@}

#endif

