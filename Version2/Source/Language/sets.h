
// $Id$

#ifndef SETS_H
#define SETS_H

/** @name sets.h
    @type File
    @args \ 

  Results for sets.
  Basic set expressions.

 */

#include "exprs.h"

//@{
  



// ******************************************************************
// *                                                                *
// *                        set_result class                        *
// *                                                                *
// ******************************************************************

/**   The base class for sets, as generated by a set expression.
      Also used within arrays to define the index values.
      Note: like expressions, we count the number of incoming
      pointers.  That's so we can share the same set
      (for instance, within multiple arrays).
*/  

class set_result : public shared_object {
  /// Number of elements
  int size;  
public:
  set_result(int s);
  virtual ~set_result();

  inline int Size() const { return size; }

  /** Get the nth item of the set.
      n must be between 0 and Size()-1.
   */
  virtual void GetElement(int n, result *x) = 0;

  /** The position of x in the set.
      If x is not contained in the set, we return -1.
      Note that this is the inverse of GetElement.
   */
  virtual int IndexOf(const result &x) = 0;

  /// For display purposes.
  virtual void show(OutputStream &s) = 0;
};

inline OutputStream& operator<< (OutputStream &s, set_result *r) 
{
  r->show(s);
  return s;
}

inline set_result* Copy(set_result *e)
{
  Share(e);
  return e;
}


// ******************************************************************
// *                                                                *
// *           Global functions  to build set expressions           *
// *                                                                *
// ******************************************************************

// used by real set indexing
extern option* index_precision;


/**  Builds an interval set expression.
     The arguments must be all the same type.
 */
expr*  MakeInterval(const char* fn, int line, expr* start, expr* stop, expr* inc);

/**  Builds a set with a single element.
 */
expr*  MakeElementSet(const char* fn, int line, expr* element);

/**  Builds a set (expression) as the union of other sets.
 */
expr*  MakeUnionOp(const char* fn, int line, expr* left, expr* right);

/**  Converts a set of integers into a set of reals.
 */
expr*  MakeInt2RealSet(const char* fn, int line, expr* intset);

/**  Optimize union operators into one big associative operation.
*/
expr*  OptimizeUnion(expr* setexpr);

//@}

#endif

