
// $Id$

/*
    Test of PNs with vanishing markings
*/


pn foo(int n) := {
  place p1, p2, p3, p4, p5, p6, p7, p8;
  init(p1:n);

  trans T1, T2, T3, T4, t5, t6, T7, t8, t9, T10, t11;

  firing(
	T1 : expo(1.0),
	T2 : expo(2.1),
	T3 : expo(3.2),
	T4 : expo(4.0),
	t5 : 0,
	t6 : 0,
	T7 : expo(7.1),
	t8 : 0,
	t9 : 0,
	T10 : expo(10.0),
	t11 : 0
  );

  weight(t5 : 1.0, t6 : 1.0);
  weight(t8 : 1.0, t9 : 1.0);
  // t11 by itself, shouldn't need weight

  arcs( 
	p2 : T1, T1 : p1,
	p1 : T2, T2 : p2,
	p1 : T3, T3 : p3,
	p4 : T4, T4 : p2,
	p3 : t5, t5 : p4,
	p3 : t6, t6 : p5,
	p6 : T7, T7 : p4,
	p5 : t8, t8 : p6,
	p5 : t9, t9 : p7,
	p8 : T10, T10 : p6,
	p7 : t11, t11 : p8
  );

  int ns := num_states(true);
  int mc := num_arcs(true);
};

#PnMarkingStyle SAFE

print("Tangible only:\n", foo(1).ns, "\nMarkov chain:\n", foo(1).mc, "\n");

print("Resetting, ignore this:", foo(0).ns, "\n");

print("Building MC & RS simultaneously, should get same Markov chain:\n",
      foo(1).mc, "\n");


//
// Test of vanishing loops
//

pn bar(bool can_escape) := {
  place p1, p2, p3, p4, p5, p6;
  init(p1:1);

  trans T1, t2, t3, t4, t5, Tt6, T7;
  
  firing(
	T1 : expo(2.0),
  	t2 : 0,
	t3 : 0,
	t4 : 0,
	t5 : 0,
	T7 : expo(7.1)
  );
  cond(can_escape,
	firing(Tt6 : 0); weight(t5 : 1.0, Tt6 : 1.0),
 	firing(Tt6 : expo(6.1))
  );
  arcs(
	p1 : T1, T1 : p3,
	p3 : t2, t2 : p5,
	p5 : t3, t3 : p6,
	p6 : t4, t4 : p4,
	p4 : t5, t5 : p3,
	p4 : Tt6, Tt6 : p2,
	p2 : T7, T7 : p1
  );
  
  int ns := num_states(true);
  int mc := num_arcs(true);
};

print("A Vanishing Loop that can be escaped\n");
print("Tangible:\n", bar(true).ns, "\nMarkov chain:\n", bar(true).mc, "\n");

print("A Vanishing Loop that cannot be escaped\n");
print("Tangible:\n", bar(false).ns, "\nMarkov chain:\n", bar(false).mc, "\n");


print("Same test for MC & RS simultaneously\n");

print("A Vanishing Loop that can be escaped\n");
print("Markov chain:\n", bar(true).mc, "\n");
print("A Vanishing Loop that cannot be escaped\n");
print("Markov chain:\n", bar(false).mc, "\n");
