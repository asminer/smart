
// $Id$

// functions with no parameters

real pi := 3.1415926;
print(pi, "\n");

print("These should be errors:\n");
int pi := 3;  // In South Carolina?
real pi := 3.14;
real pi := 3.1415926;

// Basic functions definitions

int plus(int a, int b) := a+b;
real plus(real x, real y) := x+y+0.01;  // to distinguish
int times(int a, int b:=1) := a*b;
print("should get 8: ", plus(3,5), "\n");
print("should get 8.01: ", plus(3.0, 5.0), "\n");
print("should get 8.01: ", plus(3, 5.0), "\n");
print("should get 15: ", times(3,5), "\n");
print("should get 3: ", times(3,default), "\n");

print("Duplication errors:\n");
int plus(int c, int d) := 2*a+b;
real times(int x, real y:=1.0) := x*y;
int summation(int a, int a, int a) := a+a+a;
	
print("Bad function calls:\n");
plus(3,4,5);
times(2.2, 2.4);
plus(times(2), 3);

print("Nesting:\n");
print("should get 12: ", plus(3, plus(4,5)), "\n");
print("should get 10: ", plus(plus(1,2), plus(3,4)), "\n");
print("should get 10: ", plus(plus(plus(1,2), 3), 4), "\n");

// Functions and their return types:

real promote1(int a, int b) := a+b;
real promote2(int c, real d) := c+d;

# RealFormat FIXED

print("should be 5.0: ", promote1(2,3):2:1, "\n");
print("should be 5.1: ", promote2(2,3.1):2:1, "\n");

print("This should be an error:\n");

int foo(int a, int b) := a/b;  // that's a real

// Recursion:
real fact(int n) := cond(n<2, 1, n*fact(n-1));

print("Factorials:\n");
for (int i in {0..20}) {
  print(i:3,"! is ", fact(i):1:0, "\n");
}

int fib(int n) := cond(n<2, 1, fib(n-1)+fib(n-2));

print("Fibonacci:\n");
for (int i in {0..25}) {
  print(i:3, "th Fibonacci: ", fib(i), "\n");
}

// Named parameters

print("should be 5.0: ", promote2(d:=3, c:=2):2:1, "\n");
print("should be 5.1: ", promote2(d:=3.1, c:=2):2:1, "\n");

print("Another duplication error:\n");

real promote2(int c, real d) := c+d;
real promote2(real d, int c) := c+d;

print("Should be ok\n");

int myadd(int a, int b) := 2*a + b;
int mymult(int a := 1, int b := 2) := a*(b-1);

print("should be 4: ", myadd(a:=1, b:=2), "\n");
print("should be 5: ", myadd(b:=1, a:=2), "\n");

print("should be 12: ", mymult(a:=3, b:=5), "\n");
print("should be 10: ", mymult(b:=3, a:=5), "\n");
print("should be  6: ", mymult(a:=3), "\n");
print("should be  4: ", mymult(b:=5), "\n");
print("should be  1: ", mymult(a:=default, b:=default), "\n");

// Forward declarations

print("Testing forward function declarations\n");

int mybinary(int a, int b);
int myident := 0;

int square(int a) := mybinary(a,a);
int mypow(int a, int b) := 
  cond(b==0,
    myident,
    cond(mod(b,2)==0,
      square(mypow(a, div(b,2))),
      mybinary(a, mypow(a, b-1))
    )
  );

int mybinary(int a, int b) := a+b;

print("Should be 0..20..2:\n");
for (int i in {0..10}) {
  print(mypow(2, i), "\n");
}

int myfwd(int a, int b);
int myfoo(int a, int b) := myfwd(a,b);

print("Should cause an error:\n");
int myfwd(int c, int d) := c+d;

int myfwd(int a, int b);

print("Not yet defined:\n");
print(myfoo(3,4), "\n");

int myfwd(int a, int b) := a+b;
print("defined:\n");
print(myfoo(3,4), "\n");

