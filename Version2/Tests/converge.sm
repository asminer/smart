
/*
   $Id$
*/

/*
 *    This program tests converge statements
 */

	
# UseCurrent true
# ConvergePrecision 1e-7

# Verbose true
	
/*

  Checks 1d converge statement

*/


converge {
  real a guess 1000.0;
  real a := sqrt(a);
}

print("a=",a,"\n"); 

/* 
    Test of a 2d converge:

    2s+t=4
    s+2t=5

*/

converge {
  real s guess 100.0;
  real t := (5.0-s)/2.0;
  real s := (4.0-t)/2.0;
};

print("s=",s,"\n");
print("t=",t,"\n");

/* 
    Test of a 3d converge:

    5x+y+z = 10
    x+5y+z = 14 
    x+y+5z = 18

*/

converge {
  real x guess 100.0;
  real y guess 100.0;
  real z := (18.0-x-y)/5.0; 
  real y := (14.0-x-z)/5.0;
  real x := (10.0-y-z)/5.0;
};

print("x=",x,"\n");
print("y=",y,"\n");
print("z=",z,"\n");

# UseCurrent false
	
/* 

  Test of the UseCurrent option
	
*/

converge {
  real x2 guess 100.0;
  real y2 guess 100.0;
  real z2 guess 100.0;  
  real z2 := (18.0-x2-y2)/5.0; 
  real y2 := (14.0-x2-z2)/5.0;
  real x2 := (10.0-y2-z2)/5.0;
};

print("x2=",x2,"\n");
print("y2=",y2,"\n");
print("z2=",z2,"\n");


# ConvergePrecision 1e-2
# ConvergePrecisionTest ABSOLUTE

print("Using absolute precision\n");

converge {
    real apx guess 1000;
    real apx := 10*sqrt(apx);
    print("\tapx=",apx,"\n");
};

print("Using relative precision\n");

# ConvergePrecisionTest RELATIVE

converge {
    real rpy guess 1000;
    real rpy := 10*sqrt(rpy);
    print("\trpy=",rpy,"\n");
};

# ConvergePrecision 1e-7

/*
    Evil things within a converge statement.
*/

print("Testing bad guess\n");
converge{
  real z1 guess z1; 
  real z1 := sqrt(z1);
};
print("This may cause a compile error:\n");
print(z1, "\n");

print("Testing Null guess\n");
converge{
  real z3 guess null;
  real z3 := sqrt(z3);
};
print("This should be null: ", z3, "\n");

print("Testing Bad return value\n");
converge{
  real z4 guess 100;
  real z4 := sqrt(z4+ bad_variable);
};
print(z4, "\n");

print("Testing Null return value\n");
converge{
  real z5 guess 10;
  real z5 := null;
};
print("This should be null: ", z5, "\n");

print("Testing Bad guess & return value\n");
converge {
  real z6 guess z6;
  real z6 := sqrt(z6+bad_variable);
};
print(z6, "\n");

print("Testing Null guess & return value\n");
converge {
  real z7 guess null;
  real z7 := null;
};
print(z7, "\n");

print("Testing No guess\n");
converge {
  real z8 := sqrt(z8);
}
print(z8, "\n");

print("Testing z9: ok, z10: no guess, bad return value\n");
converge {
  real z9 guess 100;
  real z10 := sqrt(z10);
  real z9 := sqrt(z9);
};
print(z9, ", ", z10, "\n");

print("Testing p: ok, q: null return value\n");
converge {
  real p guess 100;
  real q := null;
  real p := sqrt(p);
};
print(p, ", ", q, "\n");

print("This leads to a bad computation\n");
converge {
  real n guess -100;
  real n := sqrt(n);
};
print(n, "\n");  // should be null

print("This is fine computationally, but we want it to be null\n");
converge{
  real m guess null;
  real m := cond(is_null(m), 1, null);
  print("Current m is ", m, "\n");
};
print(m, "\n");

print("These are type mismatches for converge\n");
converge{
  int i guess 1;
  int i := mod(i*3, 31);
};
print(i, "\n");

print("We should get an error for re-defining z11\n");
converge {
  real z11 guess 30;
  real z11 := sqrt(z11);
  real z11 := sqrt(z11+1);
}
print("should be 1: ", z11, "\n");

print("Errors for too many guesses, for z12 and z13\n");
converge{
  real z12 guess 50;
  real z12 guess 60;
  real z12 := sqrt(z12);
  real z13 := sqrt(z12);
  real z13 guess 70;
}
print("should be all 1: ", z12, ", ", z13, "\n");

print("Testing split converge error\n");

converge {
  real split guess 100;
}
print("Should be 100: ", split, "\n");

print("This should be an error:\n");
converge {
  real split := sqrt(split);
}
print("Still 100: ", split, "\n");
