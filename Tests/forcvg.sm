
/*
    $Id$
 */
	
/*
    Tests a for - converge nesting

*/

// # Verbose true
# ConvergePrecision 1e-7
	
for (int i in {1..10}) {
  converge {
    real x[i] guess 100*i; 
    real x[i] := sqrt(i*x[i]);
  }
  print("x[", i, "] converged to ", x[i], "\n"); 
}

print("Multiple guess error, for arrays\n");
for (int i in {8..10}) {
  converge {
    real y[i] guess i*10;
    real y[i] guess i*10+5;
    real y[i] := sqrt(y[i]);
    real w[i] := sqrt(y[i]);
    real w[i] guess i;
  }
  print("y[", i, "] converged to ", y[i], "\n");
  print("w[", i, "] converged to ", w[i], "\n");
}

print("Multiple definition error, for arrays\n");
for (int i in {8..10}) {
  converge {
    real z[i] guess i*10;
    real z[i] := sqrt(z[i]);
    real z[i] := sqrt(z[i]+1);
  }
  print("z[", i, "] converged to ", z[i], "\n");
}

print("Wide split converge error for arrays\n");

for (int i in {8..10}) {
  converge {
    real widesplit[i] guess i*10;
  }
}
for (int i in {8..10}) {
  converge {
    real widesplit[i] := sqrt(widesplit[i]);
  }
}
for (int i in {8..10}) {
  print("widesplit[", i, "] should be ", i*10, ": ", widesplit[i], "\n");
}

print("Near split converge error for arrays\n");

for (int i in {8..10}) {
  converge {
    real nearsplit[i] guess i*10;
  }
  converge {
    real nearsplit[i] := sqrt(nearsplit[i]);
  }
}
for (int i in {8..10}) {
  print("nearsplit[", i, "] should be ", i*10, ": ", nearsplit[i], "\n");
}

