
// $Id$

/* 
   Tests for dtmc formalism and internal stuff
*/



// A small simple one to check the print_states and num_arcs functions

dtmc d0 := {
  state a,b;
  init(a:1);
  arcs(
      a:a:1,
      a:b:3,
      b:a:1
  );

  void show := { 
    print("d0 states:\n"); 
    show_states(false);
    print("d0 ");
    show_proc(false);
  };
};

d0.show;

//
// Check state errors
//

print("Some bad state name errors:\n");

dtmc d1 := {
  state a,b,a;
  init(a:1);
  arcs(
      a:c:1
  );
};

// 
// Warnings for duplicate arcs and such
//

dtmc d2 := {
  state a,b,c;
  init(a:1, b:1, a:1);
  arcs(
      a:b:1,
      a:c:1,
      a:b:1
  );
  bigint m1 := num_states;
};

print("Warnings for duplicates:\n");
print(d2.m1, "\n");

//
// Check Markov chain classification
//

dtmc d3(int dummy) := {
  state a,        // absorbing
        g,h,i,j,  // transients
        b,c,d,    // recurrent class
        e,f;      // recurrent class

  init (i:dummy);

  arcs(
      i : g : 1,
      g : h : 1,
      h : i : 1,

      g : a : 1,
      h : b : 1,
      i : j : 1, j : e : 1,

      e : e : 1, e : f : 1,
      f : e : 1,

      b : c : 1, b : d : 1,
      c : d : 1,
      d : b : 1
  );

  void show := { 
    print("d3 states:\n"); 
    show_states(false); 
    print("d3 ");
    show_proc(false);
  };
};

# StateDisplayOrder LEXICAL
print("States should appear in lexical order: a,b,c,d,e,f,g,h,i,j:\n");
d3(1).show;

# StateDisplayOrder NATURAL
print("Transients should appear first {g,h,i,j}, then recurrent, then a:\n");
d3(2).show;

# StateDisplayOrder DISCOVERY
print("States should appear in definition order: a,g,h,i,j,b,c,d,e,f:\n");
d3(1).show;

//
// Simple array of states test
//

dtmc d4(int N) := {
  for (int i in {1..N}) {
    state s[i];
  }
  init(s[1]:1);
  for (int i in {2..N}) {
    arcs(s[i-1] : s[i] : 1, s[i] : s[i-1] : 2);
  }
  void show := { 
    show_states(false); 
    show_proc(false);
  };
};

for (int n in {1..5}) {
  print("Birth death with ", n, " states:\n");
  d4(n).show;
}

//
// crazy stuff that should not be allowed
// 

dtmc foo1(state a, state b) := {
  state c, d, e;
  init(b:1, c:1);
  arcs(
      a:b:1, a:c:1,
      b:c:1, b:d:1,
      c:d:1, c:e:1,
      d:e:1,
      e:a:1
  );
  bigint m1 := num_states;
  real m2 := prob_ss(in_state(a));
  real m3 := prob_ss(in_state({a, b}));
};

dtmc bar1 := {
  state x, y;
  init(x:1);
  bigint m1 := foo1(x, y).m1;
  real m2 := foo1(x, y).m2;
  real m3 := foo1(x, y).m3;
};

print("Should generate meaningful warnings:\n");
compute(bar1.m1);
print("This should be zero: ", bar1.m2, "\n");
print("This should be zero: ", bar1.m3, "\n");

dtmc oz := {
  state r, n, s;
  arcs(
      r : r : 2,  r : n : 1,  r : s : 1,
      n : r : 1,  n : s : 1,
      s : r : 1,  s : n : 1,  s : s : 2
  );
  init(n:1);
  real ssr := prob_ss(in_state(r));
  real ssn := prob_ss(in_state(n));
  real sss := prob_ss(in_state(s));

  real ssbad := prob_ss(in_state({r, s}));
};

print("Ergodic steady-state tests.\n");
print("Should print a warning about no initial distribution, but work fine.\n");

compute(oz.ssr);

print("Should be 0.4: ", oz.ssr, "\n");
print("Should be 0.2: ", oz.ssn, "\n");
print("Should be 0.4: ", oz.sss, "\n");
print("Should be 0.8: ", oz.ssbad, "\n");

dtmc absorb := {
  state a, b, c, d, e, f;
  init( a:1, c:1, d:1 );
  arcs(
      a : b : 2, a : d : 1,
      b : c : 3, b : e : 1,
      c : a : 4, c : f : 1
  );

  real ssa := prob_ss(in_state(a));
  real ssb := prob_ss(in_state(b));
  real ssc := prob_ss(in_state(c));
  real ssd := prob_ss(in_state(d));
  real sse := prob_ss(in_state(e));
  real ssf := prob_ss(in_state(f));
};

print("Absorbing steady-state tests.\n");

compute(absorb.ssa);

print("Should be 0: ", absorb.ssa, "\n");
print("Should be 0: ", absorb.ssb, "\n");
print("Should be 0: ", absorb.ssc, "\n");
print("Should be 4: ", 6 * absorb.ssd : 1 : 4, "\n");
print("Should be 1: ", 6 * absorb.sse : 1 : 4, "\n");
print("Should be 1: ", 6 * absorb.ssf : 1 : 4, "\n");

print("This chain requires an initial distribution.\n");
print("None is given, so we should get a warning and an error.\n");

dtmc two_absorb := {
  state t, a1, a2;
  arcs(
      t : a1 : 1, t : a2 : 2
  );
  real g1 := prob_ss(in_state(a1));
  real g2 := prob_ss(in_state(a2));
};

compute(two_absorb.g1);

print("This will not converge, should print a warning:\n");

dtmc flip := {
  state a, b;
  init(a:1);
  arcs(
      a : a : 1, a : b : 1,
      b : a : 1
  );
  real sa := prob_ss(in_state(a));
  real sb := prob_ss(in_state(b));
};

# MCSolver JACOBI

compute(flip.sa);


print("Done with dtmc tests.\n");
