


// functions with no parameters

real pi := 3.1415926;
print(pi, "\n");

print("These should be errors:\n");
int pi := 3;  // In South Carolina?
real pi := 3.14;
real pi := 3.1415926;

// Basic functions definitions

int plus(int a, int b) := a+b;
real plus(real x, real y) := x+y+0.01;  // to distinguish
int times(int a, int b:=1) := a*b;
print("should get 8: ", plus(3,5), "\n");
print("should get 8.01: ", plus(3.0, 5.0), "\n");
print("should get 8.01: ", plus(3, 5.0), "\n");
print("should get 15: ", times(3,5), "\n");
print("should get 3: ", times(3,default), "\n");

print("Duplication errors:\n");
int plus(int c, int d) := 2*a+b;
real times(int x, int y:=1) := x*y;
int summation(int a, int a, int a) := a+a+a;
	
print("Bad function calls:\n");
plus(3,4,5);
times(2.2, 2.4);
plus(times(2), 3);

print("Nesting:\n");
print("should get 12: ", plus(3, plus(4,5)), "\n");
print("should get 10: ", plus(plus(1,2), plus(3,4)), "\n");
print("should get 10: ", plus(plus(plus(1,2), 3), 4), "\n");

// Functions and their return types:

real promote1(int a, int b) := a+b;
real promote2(int c, real d) := c+d+0.1;

# OutputRealFormat FIXED

print("should be 5.0: ", promote1(2,3):2:1, "\n");
print("should be 5.1: ", promote2(2,3.0):2:1, "\n");

print("This should be an error:\n");

int foo(int a, int b) := a/b;  // that's a real

// Recursion:
real fact(int n) := cond(n<2, 1.0, n*fact(n-1));

print("Factorials:\n");
for (int i in {0..20}) {
  print(i:3,"! is ", fact(i):1:0, "\n");
}

int fib(int n) := cond(n<2, 1, fib(n-1)+fib(n-2));

print("Fibonacci:\n");
for (int i in {0..25}) {
  print(i:3, "th Fibonacci: ", fib(i), "\n");
}

print("Another duplication error:\n");

real promote2(int c, real d) := c+d;

print("Should be ok\n");

print("Checking unused, null parameters:\n");
int ignore_a(int a, int b) := b;
print("should get 42: ", ignore_a(null, 42), "\n");

// Forward declarations

print("Testing forward function declarations\n");

int mybinary(int a, int b);
int myident := 0;

int square(int a) := mybinary(a,a);
int mypow(int a, int b) := 
  cond(b==0,
    myident,
    cond( b%2==0,
      square(mypow(a, div(b,2))),
      mybinary(a, mypow(a, b-1))
    )
  );

int mybinary(int a, int b) := a+b;

print("Should be 0..20..2:\n");
for (int i in {0..10}) {
  print(mypow(2, i), "\n");
}

int myfwd(int a, int b);
int myfoo(int a, int b) := myfwd(a,b);

int myfwd(int a, int b);

print("Not yet defined:\n");
print(myfoo(3,4), "\n");

int myfwd(int a, int b) := a+b;
print("defined:\n");
print(myfoo(3,4), "\n");

/* 
   Default parameters that aren't provided
*/

print("This is an error:\n");
int error1 := myfoo(default, 3);


/* 
   Illegal places to define functions
*/

print("Trying to define functions in a for loop:\n");
for (int i in {1..10}) {
  int forplus(int a, int b) := a+b;
  int foriplus(int a) := a+i;
}

print("Trying to define functions in a converge:\n");
converge {
  real cvgplus(real x, real y) := x+y;
  real z guess 10;
  real cvgzplus(real x) := x+z;
}

/*
    Basic tests for named parameters
*/

int mynamed(int a, int b:=1) := a*b+a;

print("Should be 8: ", mynamed(2, 3), "\n");
print("Should be 8: ", mynamed(a:=2, b:=3), "\n");
print("Should be 8: ", mynamed(b:=3, a:=2), "\n");
print("Should be 8: ", mynamed(a:=4, b:=default), "\n");
print("Should be 8: ", mynamed(a:=4), "\n");

/*
    Overloading and names
*/

int mynamed(int a, int c:=1, int d:=1) := a*c-a*d;

print("Should be 8: ", mynamed(a:=4, b:=default), "\n");
print("Should be 8: ", mynamed(c:=3, a:=4), "\n");
print("Should be 8: ", mynamed(a:=4, c:=3), "\n");
print("Should be 8: ", mynamed(d:=0, a:=8), "\n");
print("Should be 8: ", mynamed(a:=8, d:=0), "\n");
print("Should be 8: ", mynamed(a:=4, c:=1, d:=-1), "\n");
print("Should be 8: ", mynamed(d:=-1, c:=1, a:=4), "\n");

print("Ambiguous:\n");
mynamed(a:=8);

/*
  Duplication errors.
  Adding these functions would create a scenario where
  some function would be impossible to call, because
  all of its calls are ambiguous.
*/

print("Duplicates:\n");
real mynamed(int a) := a/2;   
real mynamed(real x:=0.0, int a, int b:=1, real x:=0.0) := a*b+a*x;
real mynamed(int a, real y:=0.0, int c:=0, int d:=0) := a*y+c*d;

print("Not duplicates:\n");
real mynamed(int a, real y:=0.0, int c:=1) := a*c-y;
real mynamed(real b:=1, int a) := a*b;

print("Should be 8: ", mynamed(a:=2, b:=3), "\n");
print("Should be 6: ", mynamed(a:=2, b:=3.0), "\n");


/*
    More fun stuff
*/

print("\n\nJust for kicks:\n\n");

int TS := 13;

int pascal(int i, int j) := cond(j==0 | j>i, 0, 
                           cond(i==1, 1, pascal(i-1, j-1) + pascal(i-1, j))
			  );

for (int i in {1..TS}) {
  print(pascal(i, 1):3+(TS-i)*3);
  for (int j in {2..i}) {
    print(pascal(i,j):6);
  }
  print("\n\f");
}

