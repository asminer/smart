


print("A simple test of state order\n");

pn gspn0(int dummy) := {
  place p1, p2, p3;  // transients
  place r4, r5, r6;  // recurrent
  place a7, a8;      // absorbing

  init(p1:1, a8:dummy);

  trans t12, t14, t23, t27, t31, t38, t45, t54, t56, t64;

  firing(
  	t12 : expo(1.2),
	t14 : expo(1.4),
	t23 : expo(2.3),
	t27 : expo(2.7),
	t31 : expo(3.1),
	t38 : expo(3.8),
	t45 : expo(4.5),
	t54 : expo(5.4),
	t56 : expo(5.6),
	t64 : expo(6.4)
  );

  arcs(
  	p1 : t12, t12 : p2,
	p1 : t14, t14 : r4,
	p2 : t23, t23 : p3,
	p2 : t27, t27 : a7,
	p3 : t31, t31 : p1,
	p3 : t38, t38 : a8,
	r4 : t45, t45 : r5,
	r5 : t54, t54 : r4,
	r5 : t56, t56 : r6,
	r6 : t64, t64 : r4
  );

  int m1 := num_states(true);
  int m2 := num_arcs(true);
};

string data1(int n) := sprint("States: ", gspn0(n).m1, " Arcs: ", gspn0(n).m2);

#MatrixByRows true
#PnMarkingStyle VECTOR

print("Natural order:\n");
#StateDisplayOrder NATURAL
print(data1(1), "\n");

print("Lexical order:\n");
#StateDisplayOrder LEXICAL
print(data1(2), "\n");

#StateDisplayOrder NATURAL
string atad1(int n) := sprint("Arcs: ", gspn0(n).m2, " States: ", gspn0(n).m1);

print("Natural order, MC generated directly\n");
print(atad1(1), "\n");


print("Now for some immediate events:\n");

pn gspn1(int N) := {
  place p1, p2;
  trans t1, t2;
  firing(t1 : expo(1.5),
  	 t2 : 0 );
  init(p1:N);
  arcs(
  	p1 : t1, t1 : p2,
	p2 : t2, t2 : p1
  );
  int m1 := num_states(true);
  int m2 := num_arcs(true);
};

print("Extremely simple vanishing elimination:\n");
print(sprint("States: ", gspn1(1).m1, " Arcs: ", gspn1(1).m2), "\n");

/*
print("Same test for direct MC construction:\n");
print(sprint("Arcs: ", gspn1(2).m2, " States: ", gspn1(2).m1), "\n");
*/


pn gspn2(int N) := {
  place p1, p2, p3;
  init(p1: N);
  trans t1, t2, t3;
  firing(t1 : expo(1.23),
         t2 : 0,
	 t3 : 0.0
	);

  arcs(
   	p1 : t1, t1 : p2,
	p2 : t2, t2 : p3,
	p3 : t3, t3 : p2
  );

  int m1 := num_states(false);
  int m2 := num_arcs(false);
};


print("1 = ", gspn2(1).m1, "\n"); 
print("Should detect an inescapable vanishing loop:\n");
print(gspn2(1).m2, "\n");

/*
print("Same check, for direct MC construction:\n");
print(gspn2(2).m2, "\n");
*/

pn gspn3(int N) := {
  place p1, p2, p3;
  init(p1: N);
  trans t1, t2, t3;
  firing(t1 : expo(1.23),
         t2 : 0,
	 t3 : 0.0
	);

  arcs(
   	p1 : t1 : 2, t1 : p2, t1 : p3,
	p2 : t2, t2 : p1,
	p3 : t3, t3 : p1
  );

  int m1 := num_states(false);
  int m2 := num_arcs(false);
};

print("1 = ", gspn3(2).m1, "\n"); 
print("No defined weight error:\n");
print(gspn3(2).m2, "\n");

/*
print("Same check, for direct MC construction:\n");
print(gspn3(2).m2, "\n");
*/

pn gspn4(int N) := {
  place p1, p2, p3;
  init(p1: N);
  trans t1, t2, t3;
  firing(t1 : expo(1.23),
         t2 : 0,
	 t3 : 0.0
	);
  weight(t2 : 1.0);
  weight(t3 : 1.0);
  arcs(
   	p1 : t1 : 2, t1 : p2, t1 : p3,
	p2 : t2, t2 : p1,
	p3 : t3, t3 : p1
  );

  int m1 := num_states(false);
  int m2 := num_arcs(false);
};

print("Test for simultaneous firings for different weight classes:\n");
print(gspn4(4).m1, "\n");

/*
print("Same check, for direct MC construction:\n");
print(gspn4(2).m2, "\n");
*/
