
// $Id$

/*   
  FMS model taken from
   "A decomposition approach for stochastic reward net models"
   by G. Ciardo and K. Trivedi

  TIMED VERSION
*/

pn fms(int N, int Np) := {
  place
      P1, P1wM1, P1M1, M1, P1d, P1s, P1wP2, 
      P12, P12wM3, P12M3, M3, P12s, 
      P2, P2wM2, P2M2, M2, P2d, P2wP1, P2s, 
      P3, P3M2, P3s;

  init(P1 : N, P2 : N, P3 : N, M1 : 3, M2 : 1, M3 : 2);

  bound({P1, P1wM1, P1d, P1s, P1wP2, P12, P12wM3, P12s, 
         P2, P2wM2, P2d, P2wP1, P2s, P3, P3M2, P3s} : N);
  bound({P1M1, M1} : 3, {P12M3, M3} : 2, {P2M2, M2} : 1);

  partition(
      P12s, {P12M3, M3}, P12wM3, P12,
      P2wP1, P2s, P2d, {P2M2, M2}, P2wM2, P2,
      P1wP2, P1s, P1d, {P1M1, M1}, P1wM1, P1,
      P3s, P3M2, P3
  );

  trans
      tM1, tM2, tM3, tx, 
      tP1e, tP1j, tP2e, tP2j, 

      tP1, tP1M1, tP1s, 
      tP2, tP2M2, tP2s, 
      tP12, tP12M3, tP12s, 
      tP3, tP3M2, tP3s;

  firing(
      tM1     : expo(100)  ,
      tM2     : expo(100)  ,
      tM3     : expo(100)  ,
      tx      : expo(100)  ,
      tP1e    : expo(80)   ,
      tP1j    : expo(20)   ,
      tP2e    : expo(60)   ,
      tP2j    : expo(40)   ,
      tP1     : expo(min(1.0, Np/(tk(P1)+tk(P2)+tk(P3)+tk(P12))) * tk(P1)),
      tP1M1   : expo(tk(P1M1) / 4),
      tP1s    : expo(1/60),
      tP2     : expo(min(1.0, Np/(tk(P1)+tk(P2)+tk(P3)+tk(P12))) * tk(P2)),
      tP2M2   : expo(1/6),
      tP2s    : expo(1/60),
      tP12    : expo(min(1.0, Np/(tk(P1)+tk(P2)+tk(P3)+tk(P12))) * tk(P12)),
      tP12M3  : expo(tk(P12M3)),
      tP12s   : expo(1/60),
      tP3     : expo(min(1.0, Np/(tk(P1)+tk(P2)+tk(P3)+tk(P12))) * tk(P3)),
      tP3M2   : expo(1/2),
      tP3s    : expo(1/60)
  );

  arcs(
    P1    : tP1  ,
    tP1   : P1wM1  ,
    P1wM1 : tM1  ,
    M1    : tM1  ,
    tM1   : P1M1  ,
    P1M1  : tP1M1  ,
    tP1M1 : M1  ,
    tP1M1 : P1d  ,
    P1d   : tP1e  ,
    tP1e  : P1s  ,
    P1d   : tP1j  ,
    tP1j  : P1wP2  ,
    P1s   : tP1s  : tk(P1s),
    tP1s  : P1  : tk(P1s),

    P2    : tP2  ,
    tP2   : P2wM2  ,
    P2wM2 : tM2  ,
    M2    : tM2  ,
    tM2   : P2M2  ,
    P2M2  : tP2M2  ,
    tP2M2 : M2  ,
    tP2M2 : P2d  ,
    P2d   : tP2e  ,
    tP2e  : P2s  ,
    P2d   : tP2j  ,
    tP2j  : P2wP1  ,
    P2s   : tP2s  : tk(P2s),
    tP2s  : P2  : tk(P2s),

    P2wP1 : tx  ,
    P1wP2 : tx  ,
    tx    : P12  ,
    P12   : tP12  ,
    tP12  : P12wM3  ,
    P12wM3: tM3  ,
    M3    : tM3  ,
    tM3   : P12M3  ,
    P12M3 : tP12M3  ,
    tP12M3: P12s  ,
    tP12M3: M3  ,
    P12s  : tP12s  : tk(P12s),
    tP12s : P1  : tk(P12s),
    tP12s : P2  : tk(P12s),

    P3    : tP3  ,
    tP3   : P3M2  ,
    P3M2  : tP3M2  ,
    M2    : tP3M2  ,
    tP3M2 : M2  ,
    tP3M2 : P3s  ,
    P3s   : tP3s  : tk(P3s),
    tP3s  : P3  : tk(P3s)
  );

  bigint m1 := num_states;
  bigint m2 := num_arcs;

  real through1 := avg_ss(rate(tP1));
  real through2 := avg_ss(rate(tP2));
  real through3 := avg_ss(rate(tP3));
  real through12 := avg_ss(rate(tP12));
  real phi := avg_ss(400*rate(tP1) + 600*rate(tP2) + 100*rate(tP3) + 1100*rate(tP12)); 
};

start_timer(0);

# Report + procgen, mc_solve

int N := read_int("N");
int Np := div(3*N, 2);
compute(Np);
compute(fms(N, Np).m2);

print("FMS timed model with N=", N, " has\n\t", fms(N, Np).m1, " states\n\t", fms(N, Np).m2, " arcs\n\f");

# MCSolver GAUSS_SEIDEL
# MCSolverPrecision 1e-7
# MCSolverRelaxation 0.9
 
compute(fms(N, Np).phi);

print("Measures:\n");
print("\tthrough1 : ", fms(N, Np).through1 , "\n");
print("\tthrough2 : ", fms(N, Np).through2 , "\n");
print("\tthrough3 : ", fms(N, Np).through3 , "\n");
print("\tthrough12: ", fms(N, Np).through12, "\n");
print("\tphi: ", fms(N, Np).phi, "\n");

print("Total time: ", stop_timer(0), " seconds\n");
