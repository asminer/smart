
// $Id$
// 
// 2x2x2 Rubik's cube.
//
// We use an encoding scheme very close to Valmari's
//

pn rubik2(bool ccw, bool cw, bool dbl) := {

  place p0, r0, 
        p1, r1,
        p2, r2,
        p3, r3,
        p4, r4,
        p5, r5,
        p6, r6;

  bound({p0, p1, p2, p3, p4, p5, p6} : 6);
  bound({r0, r1, r2, r3, r4, r5, r6} : 2);

  partition(
    p6, p5, p4, p3, p2, p1, p0,
    r6, r5, r4, r3, r2, r1, r0
  );
  
  init (p1:1, p2:2, p3:3, p4:4, p5:5, p6:6);

  trans F, L, T,      // counter-clockwise rotations 
        Fr, Lr, Tr,   // clockwise rotations
        F2, L2, T2;   // double rotations

  cond(ccw, arcs(

    // F pieces
    p0 : F : tk(p0), F : p1 : tk(p0),
    p1 : F : tk(p1), F : p3 : tk(p1),
    p3 : F : tk(p3), F : p2 : tk(p3),
    p2 : F : tk(p2), F : p0 : tk(p2),

    // F rotations
    r0 : F : tk(r0), F : r1 : (1+tk(r0)) % 3,
    r1 : F : tk(r1), F : r3 : (2+tk(r1)) % 3,
    r3 : F : tk(r3), F : r2 : (2+tk(r3)) % 3,
    r2 : F : tk(r2), F : r0 : (1+tk(r2)) % 3,

    // L pieces
    p0 : L : tk(p0), L : p4 : tk(p0),
    p4 : L : tk(p4), L : p5 : tk(p4),
    p5 : L : tk(p5), L : p1 : tk(p5),
    p1 : L : tk(p1), L : p0 : tk(p1),

    // L rotations
    r0 : L : tk(r0), L : r4 : (1+tk(r0)) % 3,
    r4 : L : tk(r4), L : r5 : (2+tk(r4)) % 3,
    r5 : L : tk(r5), L : r1 : (2+tk(r5)) % 3,
    r1 : L : tk(r1), L : r0 : (1+tk(r1)) % 3,

    // T pieces
    p0 : T : tk(p0), T : p2 : tk(p0),
    p2 : T : tk(p2), T : p6 : tk(p2),
    p6 : T : tk(p6), T : p4 : tk(p6),
    p4 : T : tk(p4), T : p0 : tk(p4),

    // T rotations
    r0 : T : tk(r0), T : r2 : (1+tk(r0)) % 3,
    r2 : T : tk(r2), T : r6 : (2+tk(r2)) % 3,
    r6 : T : tk(r6), T : r4 : (2+tk(r6)) % 3,
    r4 : T : tk(r4), T : r0 : (1+tk(r4)) % 3
  ), null);

  cond(cw, arcs(

    // Fr pieces
    p0 : Fr : tk(p0), Fr : p2 : tk(p0),
    p1 : Fr : tk(p1), Fr : p0 : tk(p1),
    p3 : Fr : tk(p3), Fr : p1 : tk(p3),
    p2 : Fr : tk(p2), Fr : p3 : tk(p2),

    // Fr rotations
    r0 : Fr : tk(r0), Fr : r2 : (2+tk(r0)) % 3,
    r1 : Fr : tk(r1), Fr : r0 : (2+tk(r1)) % 3,
    r3 : Fr : tk(r3), Fr : r1 : (1+tk(r3)) % 3,
    r2 : Fr : tk(r2), Fr : r3 : (1+tk(r2)) % 3,

    // Lr pieces
    p0 : Lr : tk(p0), Lr : p1 : tk(p0),
    p4 : Lr : tk(p4), Lr : p0 : tk(p4),
    p5 : Lr : tk(p5), Lr : p4 : tk(p5),
    p1 : Lr : tk(p1), Lr : p5 : tk(p1),

    // Lr rotations
    r0 : Lr : tk(r0), Lr : r1 : (2+tk(r0)) % 3,
    r4 : Lr : tk(r4), Lr : r0 : (2+tk(r4)) % 3,
    r5 : Lr : tk(r5), Lr : r4 : (1+tk(r5)) % 3,
    r1 : Lr : tk(r1), Lr : r5 : (1+tk(r1)) % 3,

    // Tr pieces
    p0 : Tr : tk(p0), Tr : p4 : tk(p0),
    p2 : Tr : tk(p2), Tr : p0 : tk(p2),
    p6 : Tr : tk(p6), Tr : p2 : tk(p6),
    p4 : Tr : tk(p4), Tr : p6 : tk(p4),

    // Tr rotations
    r0 : Tr : tk(r0), Tr : r4 : (2+tk(r0)) % 3,
    r2 : Tr : tk(r2), Tr : r0 : (2+tk(r2)) % 3,
    r6 : Tr : tk(r6), Tr : r2 : (1+tk(r6)) % 3,
    r4 : Tr : tk(r4), Tr : r6 : (1+tk(r4)) % 3
  ), null);

  cond(dbl, arcs(

    // F2 pieces
    p0 : F2 : tk(p0), F2 : p3 : tk(p0),
    p1 : F2 : tk(p1), F2 : p2 : tk(p1),
    p3 : F2 : tk(p3), F2 : p0 : tk(p3),
    p2 : F2 : tk(p2), F2 : p1 : tk(p2),

    // F2 rotations
    r0 : F2 : tk(r0), F2 : r3 : tk(r0),
    r1 : F2 : tk(r1), F2 : r2 : (1+tk(r1)) % 3,
    r3 : F2 : tk(r3), F2 : r0 : tk(r3),
    r2 : F2 : tk(r2), F2 : r1 : (2+tk(r2)) % 3,

    // L2 pieces
    p0 : L2 : tk(p0), L2 : p5 : tk(p0),
    p4 : L2 : tk(p4), L2 : p1 : tk(p4),
    p5 : L2 : tk(p5), L2 : p0 : tk(p5),
    p1 : L2 : tk(p1), L2 : p4 : tk(p1),

    // L2 rotations
    r0 : L2 : tk(r0), L2 : r5 : tk(r0),
    r4 : L2 : tk(r4), L2 : r1 : (1+tk(r4)) % 3,
    r5 : L2 : tk(r5), L2 : r0 : tk(r5),
    r1 : L2 : tk(r1), L2 : r4 : (2+tk(r1)) % 3,

    // T2 pieces
    p0 : T2 : tk(p0), T2 : p6 : tk(p0),
    p2 : T2 : tk(p2), T2 : p4 : tk(p2),
    p6 : T2 : tk(p6), T2 : p0 : tk(p6),
    p4 : T2 : tk(p4), T2 : p2 : tk(p4),

    // T2 rotations
    r0 : T2 : tk(r0), T2 : r6 : tk(r0),
    r2 : T2 : tk(r2), T2 : r4 : (1+tk(r2)) % 3,
    r6 : T2 : tk(r6), T2 : r0 : tk(r6),
    r4 : T2 : tk(r4), T2 : r2 : (2+tk(r4)) % 3
  ), null);


  bigint ns := num_states(false);
  bigint na := num_arcs(false);

  for (int d in {0..25}) {
    stateset r[d] :=  cond(d==0, 
                        initial, 
                        EY(r[d-1]) | r[d-1]
                      );
    stateset f[d] :=  cond(d==0,
                        initial, 
                        r[d] \ r[d-1]
                      );
    bigint size[d] := card(f[d]);
  }
};

int fact(int n) := cond(n<2, 1, n*fact(n-1));
int pow(int i, int n) := cond (n==0, 1, i*pow(i,n-1));
int theory := fact(7)*pow(3,6);

bool ccw := read_bool("Allow counter-clockwise rotations");
bool cw := read_bool("Allow clockwise rotations");
bool dbl := read_bool("Count double rotations as one move");

compute(ccw);
compute(cw);
compute(dbl);

print("Rubik's cube of dimension 2, expecting ", theory, " states:\n");

# Report + procgen

model rc2 := rubik2(ccw, cw, dbl);

compute(rc2.na);

print("2x2x2 Rubik's cube has\n");
print("\t", rc2.ns, " reachable states\n");
print("\t", rc2.na, " edges in reachability graph\n");

print("\nOf those reachable states,\n");
for (int i in {0..25}) {
  cond(rc2.size[i]>0, 
    print(rc2.size[i]:8, " require ", i:2, " moves from solved state\n"),
    null
  );
};


