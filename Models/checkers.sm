
// $Id$

// Checkers board model

int N := 4; // board size

// State:

// board squares
// whose turn
// boolean "jump continue" (separate array)

// Events:
// non-jump moves
// first jump moves (priority over non-jump)
// multiple jump moves (hidden), plus choice to not multiple jump

# Report + procgen

# EVMStateStyle VECTOR

# ReportThousandSeparator ","
# OutputThousandSeparator ","


evm checkers := {
  // state info for pieces
  for (int i in {1..N}, int j in {1+i%2..N..2}) {
    intvar b[i][j];
    range(b[i][j] : {0..5});  // empty, regular r/b, and king r/b
  }

  // initial board configuration here
  init(b[1][2] : 1);
  init(b[1][4] : 1);
  init(b[4][1] : 2);
  init(b[4][3] : 2);
  
  intvar turn;
  range(turn : {1..2});
  intvar jumping_i, jumping_j;
  range(jumping_i : {0..N});
  range(jumping_j : {0..N});

  //
  // Non-jump moves
  //

  // non-jump moves to "south east"; forward for "red"
  for (int i in {1..N-1}, int j in {1+i%2..N-1..2}) {
    event nj_se[i][j];
    priority(nj_se[i][j]:1);

    guard(nj_se[i][j] : 
      (eval(b[i][j]) == 1 & eval(turn) == 1)  // red pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(nj_se[i][j] : eval(b[i+1][j+1]) == 0);
    guard(nj_se[i][j] : eval(jumping_i) == 0);  
    guard(nj_se[i][j] : eval(jumping_j) == 0);  

    assign(b[i][j] : nj_se[i][j] : 0);
    assign(b[i+1][j+1] : nj_se[i][j] : 
      cond(i==N-1 & eval(turn)==1, 
          3,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(turn : nj_se[i][j] : 3-eval(turn));
  }

  // non-jump moves to "south west"; forward for "red"
  for (int i in {1..N-1}, int j in {2+(i+1)%2..N..2}) {
    event nj_sw[i][j];
    priority(nj_sw[i][j]:1);

    guard(nj_sw[i][j] : 
      (eval(b[i][j]) == 1 & eval(turn) == 1)  // red pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(nj_sw[i][j] : eval(b[i+1][j-1]) == 0);
    guard(nj_sw[i][j] : eval(jumping_i) == 0);  
    guard(nj_sw[i][j] : eval(jumping_j) == 0);  

    assign(b[i][j] : nj_sw[i][j] : 0);
    assign(b[i+1][j-1] : nj_sw[i][j] : 
      cond(i==N-1 & eval(turn)==1, 
          3,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(turn : nj_sw[i][j] : 3-eval(turn));
  }

  // non-jump moves to "north east"; forward for "black"
  for (int i in {2..N}, int j in {1+i%2..N-1..2}) {
    event nj_ne[i][j];
    priority(nj_ne[i][j]:1);

    guard(nj_ne[i][j] : 
      (eval(b[i][j]) == 2 & eval(turn) == 2)  // black pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(nj_ne[i][j] : eval(b[i-1][j+1]) == 0);
    guard(nj_ne[i][j] : eval(jumping_i) == 0);  
    guard(nj_ne[i][j] : eval(jumping_j) == 0);  

    assign(b[i][j] : nj_ne[i][j] : 0);
    assign(b[i-1][j+1] : nj_ne[i][j] : 
      cond(i==2 & eval(turn)==2, 
          4,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(turn : nj_ne[i][j] : 3-eval(turn));
  }

  // non-jump moves to "north west"; forward for "black"
  for (int i in {2..N}, int j in {2+(i+1)%2..N..2}) {
    event nj_nw[i][j];
    priority(nj_nw[i][j]:1);

    guard(nj_nw[i][j] : 
      (eval(b[i][j]) == 2 & eval(turn) == 2)  // black pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(nj_nw[i][j] : eval(b[i-1][j-1]) == 0);
    guard(nj_nw[i][j] : eval(jumping_i) == 0);  
    guard(nj_nw[i][j] : eval(jumping_j) == 0);  

    assign(b[i][j] : nj_nw[i][j] : 0);
    assign(b[i-1][j-1] : nj_nw[i][j] : 
      cond(i==2 & eval(turn)==2, 
          4,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(turn : nj_nw[i][j] : 3-eval(turn));
  }

  //
  // Jump moves
  //

  // jump moves to "south east"; forward for "red"
  for (int i in {1..N-2}, int j in {1+i%2..N-2..2}) {
    event j_se[i][j];
    priority(j_se[i][j]:2);

    guard(j_se[i][j] : 
      (eval(b[i][j]) == 1 & eval(turn) == 1)  // red pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(j_se[i][j] : eval(b[i+2][j+2]) == 0);
    guard(j_se[i][j] : 
              eval(b[i+1][j+1]) == 3-eval(turn) | 
              eval(b[i+1][j+1]) == 5-eval(turn)
    );
    guard(j_se[i][j] : eval(jumping_i) == 0 | eval(jumping_i) == i);  
    guard(j_se[i][j] : eval(jumping_j) == 0 | eval(jumping_j) == j);  

    assign(b[i][j] : j_se[i][j] : 0);
    assign(b[i+1][j+1] : j_se[i][j] : 0);
    assign(b[i+2][j+2] : j_se[i][j] :
      cond(i==N-2 & eval(turn)==1, 
          3,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(jumping_i : j_se[i][j] : i+2);
    assign(jumping_j : j_se[i][j] : j+2);
  }

  // jump moves to "south west"; forward for "red"
  for (int i in {1..N-2}, int j in {3+i%2..N..2}) {
    event j_sw[i][j];
    priority(j_sw[i][j]:2);

    guard(j_sw[i][j] : 
      (eval(b[i][j]) == 1 & eval(turn) == 1)  // red pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(j_sw[i][j] : eval(b[i+2][j-2]) == 0);
    guard(j_sw[i][j] : 
              eval(b[i+1][j-1]) == 3-eval(turn) |
              eval(b[i+1][j-1]) == 5-eval(turn)
    );
    guard(j_sw[i][j] : eval(jumping_i) == 0 | eval(jumping_i) == i);  
    guard(j_sw[i][j] : eval(jumping_j) == 0 | eval(jumping_j) == j);  

    assign(b[i][j] : j_sw[i][j] : 0);
    assign(b[i+1][j-1] : j_sw[i][j] : 0);
    assign(b[i+2][j-2] : j_sw[i][j] : 
      cond(i==N-2 & eval(turn)==1, 
          3,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(jumping_i : j_sw[i][j] : i+2);
    assign(jumping_j : j_sw[i][j] : j-2);
  }

  // jump moves to "north east"; forward for "black"
  for (int i in {3..N}, int j in {1+i%2..N-2..2}) {
    event j_ne[i][j];
    priority(j_ne[i][j]:2);

    guard(j_ne[i][j] : 
      (eval(b[i][j]) == 2 & eval(turn) == 2)  // black pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(j_ne[i][j] : eval(b[i-2][j+2]) == 0);
    guard(j_ne[i][j] : 
              eval(b[i-1][j+1]) == 3-eval(turn) |
              eval(b[i-1][j+1]) == 5-eval(turn)
    );
    guard(j_ne[i][j] : eval(jumping_i) == 0 | eval(jumping_i) == i);  
    guard(j_ne[i][j] : eval(jumping_j) == 0 | eval(jumping_j) == j);  

    assign(b[i][j] : j_ne[i][j] : 0);
    assign(b[i-1][j+1] : j_ne[i][j] : 0);
    assign(b[i-2][j+2] : j_ne[i][j] : 
      cond(i==3 & eval(turn)==2, 
          4,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(jumping_i : j_ne[i][j] : i-2);
    assign(jumping_j : j_ne[i][j] : j+2);
  }

  // jump moves to "north west"; forward for "black"
  for (int i in {3..N}, int j in {3+i%2..N..2}) {
    event j_nw[i][j];
    priority(j_nw[i][j]:2);

    guard(j_nw[i][j] : 
      (eval(b[i][j]) == 2 & eval(turn) == 2)  // black pawn
      | 
      eval(b[i][j])-2 == eval(turn)           // any king
    );
    guard(j_nw[i][j] : eval(b[i-2][j-2]) == 0);
    guard(j_nw[i][j] : 
              eval(b[i-1][j-1]) == 3-eval(turn) |
              eval(b[i-1][j-1]) == 5-eval(turn)
    );
    guard(j_nw[i][j] : eval(jumping_i) == 0 | eval(jumping_i) == i);  
    guard(j_nw[i][j] : eval(jumping_j) == 0 | eval(jumping_j) == j);  

    assign(b[i][j] : j_nw[i][j] : 0);
    assign(b[i-1][j-1] : j_nw[i][j] : 0);
    assign(b[i-2][j-2] : j_nw[i][j] : 
      cond(i==3 & eval(turn)==2, 
          4,                        // promote to king
          eval(b[i][j])
      )
    );
    assign(jumping_i : j_nw[i][j] : i-2);
    assign(jumping_j : j_nw[i][j] : j-2);
  }

  //
  // Ending a jump turn
  //

  // end a turn that starts with a jump
  event stop_jumping;
  priority(stop_jumping:2);
  guard(stop_jumping : eval(jumping_i)>0 & eval(jumping_j)>0);
  assign( jumping_i : stop_jumping : 0,
          jumping_j : stop_jumping : 0,
          turn : stop_jumping : 3-eval(turn)
  );

  //
  // Measures
  //
  bigint ns := num_states;
  bigint na := num_arcs;
  void ps := show_states;

  stateset dead := reachable \ EX(potential(true));

  stateset p1wins := dead & potential(eval(turn)==2);
  stateset p2wins := dead & potential(eval(turn)==1);

  stateset p1force := AEF(potential(eval(turn)==1), p1wins);
  stateset p2force := AEF(potential(eval(turn)==2), p2wins);

  stateset unfair1 := p1force & initial;
  stateset unfair2 := p2force & initial;
};


print("Examining checkers...\n");
compute(checkers.na);
compute(checkers.ns);

print("\nCheckers has ", checkers.ns, " states total\n");

print("\t", card(checkers.dead), " deadlocked states\n");
print("\t", card(checkers.p1wins), " win states for player 1\n");
print("\t", card(checkers.p2wins), " win states for player 2\n");

start_timer(0);
print("Computing force win states\n");
compute(checkers.p1force);
compute(checkers.p2force);
print("Done, AEF algorithms took ", stop_timer(0), " seconds\n");
print(card(checkers.p1force), " states where player 1 can force a win\n");
print("\t", checkers.p1force, "\n");
print(card(checkers.p2force), " states where player 2 can force a win\n");
print("\t", checkers.p2force, "\n");

print(card(checkers.unfair1), " initial states where player 1 can force a win\n");
print(card(checkers.unfair2), " initial states where player 2 can force a win\n");
