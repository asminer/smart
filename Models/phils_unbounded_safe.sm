
pn phils(int N) := { 
  for (int i in {0..N-1}) {
    place Fork[i], Idle[i], WaitL[i], HasL[i], WaitR[i], HasR[i];
    trans GoEat[i], GetL[i], GetR[i], Release[i]; 
    init(Idle[i]:1, Fork[i]:1);       
    partition(Fork[i]);
    partition(Idle[i]);
    partition(WaitL[i]);
    partition(HasL[i]);
    partition(WaitR[i]);
    partition(HasR[i]);
  }
  for (int i in {0..N-1}) {
    arcs(Idle[i]:GoEat[i], GoEat[i]:WaitL[i], GoEat[i]:WaitR[i],
         WaitL[i]:GetL[i], Fork[i]:GetL[i], GetL[i]:HasL[i],
         WaitR[i]:GetR[i], Fork[(i+1) % N]:GetR[i], GetR[i]:HasR[i],
         HasL[i]:Release[i], HasR[i]:Release[i], Release[i]:Idle[i], 
         Release[i]:Fork[i], Release[i]:Fork[(i+1) % N]);
  } 
  bigint m1 := num_states;
//  bigint m2 := num_arcs;
  stateset eat  := reachable & potential(tk(HasL[0])>0 & tk(HasR[0])>0);
  stateset left := reachable & potential(tk(HasL[0])>0);
};

int N := read_int("the number of philosophers");
compute(N);

for(int i in {1..3*N+1}) {
  bigint fib[i] := cond(i<3, 1, fib[i-1] + fib[i-2]);
}

# StateDisplayOrder LEXICAL
# Report + procgen
# OutputThousandSeparator ","
# ReportThousandSeparator ","

// # Debug + procgen

# ProcessGeneration MEDDLY
# MeddlyProcessGeneration OTF_SATURATION
# MeddlyVariableStyle ON_THE_FLY
# MeddlyNSFNodeDeletion PESSIMISTIC

print("Expecting ", fib[3*N+1] + fib[3*N-1], " states\n");

model m := phils(N);
//compute(m.m2);

print(N, " dining philosophers model\n\tstates: ", m.m1, "\n");
//print("\tedges : ", m.m2, "\n");

print("Number of have left states: ", card(m.left), "\n");
print("Number of eating    states: ", card(m.eat ), "\n");
